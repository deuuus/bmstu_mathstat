function main()
   X = [11.89, 9.60,  9.29,  10.06, 9.50,  8.93,  9.58,  6.81,  8.69,...
         9.62,  9.01,  10.59, 10.50, 11.53, 9.94,  8.84,  8.91,  6.90,...
         9.76,  7.09,  11.29, 11.25, 10.84, 10.76, 7.42,  8.49,  10.10,...
         8.79,  11.87, 8.77,  9.43,  12.41, 9.75,  8.53,  9.72,  9.45,...
         7.20,  9.23,  8.93,  9.15,  10.19, 9.57,  11.09, 9.97,  8.81,...
         10.73, 9.57,  8.53,  9.21,  10.08, 9.10,  11.03, 10.10, 9.47,...
         9.72,  9.60,  8.21,  7.78,  10.21, 8.99,  9.14,  8.60,  9.14,...
         10.95, 9.33,  9.98,  9.09,  10.35, 8.61,  9.35,  10.04, 7.85,...
         9.64,  9.99,  9.65,  10.89, 9.08,  8.60,  7.56,  9.27,  10.33,...
         10.09, 8.51,  9.86,  9.24,  9.63,  8.67,  8.85,  11.57, 9.85,...
         9.27,  9.69,  10.90, 8.84,  11.10, 8.19,  9.26,  9.93,  10.15,...
         8.42,  9.36,  9.93,  9.11,  9.07,  7.21,  8.22,  9.08,  8.88,...
         8.71,  9.93,  12.04, 10.41, 10.80, 7.17,  9.00,  9.46,  10.42,...
         10.43, 8.38,  9.01]
  
   % Уровень доверия
   gamma = 0.9;
   % Объем выборки 
   n = length(X);
   % Точечная оценка мат. ожидания
   mu = mean(X);
   % Точечная оценка дисперсии
   s2 = var(X);
   
   % Нижняя граница доверительного интервала для мат. ожидания
   muBot = findMuBot(n, mu, s2, gamma);
   % Верхняя граница доверительного интервала для мат. ожидания
   muTop = findMuTop(n, mu, s2, gamma);
   % Нижняя граница доверительного интервала для дисперсии
   s2Bot = findS2Bot(n, s2, gamma);
   % Верхняя граница доверительного интервала для дисперсии
   s2Top = findS2Top(n, s2, gamma);
   
   % Вывод полученных ранее значений
   fprintf('mu (Точечная оценка математического ожидания) = %.3f\n', mu);
   fprintf('S2 (Точечная оценка дисперсии) = %.3f\n', s2);
   fprintf('muBot (нижняя граница доверительного интервала для математического ожидания) = %.3f\n', muBot);
   fprintf('muTop (верхняя граница -//-) = %.3f\n', muTop);
   fprintf('s2Bot (нижняя граница доверительного интервала для дисперсии) = %.3f\n', s2Bot);
   fprintf('s2Top (верхняя граница -//-) = %.3f\n', s2Top);
   
   % Создание массивов точечных оценок
   muArray = zeros(1, n);
   s2Array = zeros(1, n);
   % Создание массивов границ доверительных интервалов
   muBotArray = zeros(1, n);
   muTopArray = zeros(1, n);
   s2BotArray = zeros(1, n);
   s2TopArray = zeros(1, n);
   
   for i = 1 : n
       mu = mean(X(1:i));
       s2 = var(X(1:i));
       % Точечная оценка матожидания
       muArray(i) = mu;
       % Точечная оценка дисперсии
       s2Array(i) = s2;
       % Нижняя граница доверительного интервала для матожидания
       muBotArray(i) = findMuBot(i, mu, s2, gamma);
       % Верхняя граница доверительного интервала для матожидания
       muTopArray(i) = findMuTop(i, mu, s2, gamma);
       % Нижняя граница доверительного интервала для дисперсии
       s2BotArray(i) = findS2Bot(i, s2, gamma);
       % Верхняя граница доверительного интервала для дисперсии
       s2TopArray(i) = findS2Top(i, s2, gamma);
   end
   
   % Построение графиков
   plot(1 : n, [(zeros(1, n) + mu)', muArray', muBotArray', muTopArray']);
   xlabel('n');
   ylabel('y');
   figure;
   plot(1 : n, [(zeros(1, n) + s2)', s2Array', s2BotArray', s2TopArray']);
   xlabel('n');
   ylabel('z');
end

% Функция поиска нижней границы доверительного интервала для матожидания
function muBot = findMuBot(n, mu, s2, gamma)
   muBot = mu - sqrt(s2) * tinv((1 + gamma) / 2, n - 1) / sqrt(n);
end

% Функция поиска верхней границы доверительного интервала для матожидания
function muTop = findMuTop(n, mu, s2, gamma)
   muTop = mu + sqrt(s2) * tinv((1 + gamma) / 2, n - 1) / sqrt(n);
end

% Функция поиска нижней границы доверительного интервала для дисперсии
function s2Bot = findS2Bot(n, s2, gamma)
   s2Bot = ((n - 1) * s2) / chi2inv((1 + gamma) / 2, n - 1);
end

% Функция поиска верхней границы доверительного интервала для дисперсии
function s2Top = findS2Top(n, s2, gamma)
   s2Top = ((n - 1) * s2) / chi2inv((1 - gamma) / 2, n - 1);
end